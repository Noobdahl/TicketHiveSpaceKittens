@page "/details/{id:int}"
@using Microsoft.AspNetCore.Authorization;
@using TicketHiveSpaceKittens.Client.Manager;
@using TicketHiveSpaceKittens.Client.Services;
@using TicketHiveSpaceKittens.Shared.Models;
@inject IEventService eventService
@inject ICartService cartService
@inject IModalService modal
@inject NavigationManager navigationManager;
@attribute [Authorize]

 <div class="container">
    <div class="form-group mt-5 text-center">
        <h1 class="fw-bolder">Details event</h1>
    </div>
    @if (selectedEvent != null)
    {
    <div class="row align-items-center mt-5">
        <div class="col-md-6">
            <img class="card-img-top mb-5" src="/Images/Event images/@selectedEvent.ImageUrl" alt="eventImgage" />
        </div>

            <div class="col-md-6">
                <h1 class="display-5 fw-bolder">@selectedEvent.Name</h1>
                <div class="fs-5 mb-5">
                    <span><strong>Ticket Price:</strong> @RatesManager.GetPrice(selectedEvent.TicketPrice)</span><br>
                    <span><strong>Tickets Remaining:</strong> @selectedEvent.TicketsRemaining st</span><br>
                    <span><strong>Location:</strong> @selectedEvent.Location </span><br>
                    <span><strong>Date:</strong> @selectedEvent.EventDate.ToString("yyyy-MM-dd") </span><br>
                    <span><strong>Local time:</strong> @selectedEvent.EventDate.ToString("HH:mm") </span><br>
                    <span><strong>Tags:</strong> <p>
                        @foreach(var tag in selectedEvent.Tags)
                        {
                            <i>@tag.TagName</i>
                            
                        }
                        </p>
                    </span><br>
                </div>

                <p class="lead">@selectedEvent.Description</p>
                <div class="d-flex">
                    @if (selectedEvent.TicketsRemaining > 0)
                    {
                            <button class="btn btn-primary mt-3" style="font-family: 'Times New Roman', Times, serif" @onclick="@(() => {cartService.AddToCartAsync(selectedEvent); modal.Show<StepBeforeCart>("Event added to cart!");})">Buy Ticket</button>
                    }
                    else
                    {
                            <button class="btn btn-primary mt-3" style="font-family: 'Times New Roman', Times, serif" @onclick="@(() => {cartService.AddToCartAsync(selectedEvent); modal.Show<StepBeforeCart>("Something went wrong");})">Sold Out</button>
                    }
                </div>
            </div>
    </div>
    }
    else
    {
        <h1>Loading event...</h1>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private EventModel? selectedEvent;

    protected override async Task OnParametersSetAsync()
    {
        selectedEvent = await eventService.GetOneEventAsync(Id);
    }
}
