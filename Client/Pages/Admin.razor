@page "/admin"
@using Microsoft.AspNetCore.Authorization;
@using TicketHiveSpaceKittens.Client.Services;
@using TicketHiveSpaceKittens.Shared.Models;
@attribute [Authorize (Roles = "Admin")]
@inject IEventService service
@inject NavigationManager navManager


 
<div class="card bg-light">
    <div class="card-body"style="background-color:#fbe89c">
        <h1 class="text-center">Welcome Admin</h1>
    </div>
</div>


<div class="card border-0" style="margin-right:80px">
    <div class="card-body align-self-end">
        <a class="btn btn-primary btn-lg btn-block" href="admin/addevent">Add Event</a>
    </div>
</div>


<div class=" form-group mt-5 text-center">
    <h1 class="fw-bolder">Search for the event</h1>
    <input class="form-control-sm" type="text" @bind-value="@searchText" @oninput="@FilterEvents" placeholder="Search event..." />
    <button class="btn btn-sm btn-outline-primary" @onclick="SortByPrice">Price</button>
    <button class="btn btn-sm btn-warning" @onclick="SortByDate">Date</button>
</div>


<div class="row mt-5">

    @if (filteredEvents != null)
    {
        foreach (var e in filteredEvents)
        {
            if (e.TicketsRemaining > 0)
            {
                <div class="col-md-3 mt-3">
                    <div class="card border-1 m-2 mb-2">
                  
                            <div class="card-header text-center">
                                <a href="details/@e.EventId">
                                    <img class="card-img-top" src="/Images/Event images/@e.ImageUrl" style="width:200px; height:150px" />
                                </a>
                            </div>

                            <div class="card-body">
                            <h5 class="card-title"><strong>@e.Name:</strong></h5><br>
                            <span class="card-text font-weight-bold"><strong>Location:</strong> @e.Location</span><br>
                            <span class="card-text font-weight-bold"><strong>Events date:</strong> @e.EventDate.ToString("yyyy-MM-dd")</span><br>
                            <span class="card-text font-weight-bold"><strong>Local time:</strong> @e.EventDate.ToString("HH:mm")</span><br>
                            <span class="card-text font-weight-bold"><strong>Ticket price:</strong> @e.TicketPrice</span><br>
                                        <!-----------------------------------------------Button with delete dialog--------------------------------------------------->
                            <ConfirmationDialog Title="Delete Event"
                                    Class="btn btn-psl-add mt-2"
                                    Message="Delete this event?"
                                    YesCssClass="btn-yes btn-success"
                                    NoCssClass="btn-no btn-danger"
                                    ConfirmedChanged="@(async (bool confirmed) => await DeleteEvent(e.EventId, confirmed))">
                                <ButtonContent>
                                    <button type="submit" class="btn btn-lg btn-danger w-100 fs-6 fw-bolder">
                                        <ion-icon name="trash-outline" style="color:white;"></ion-icon> Delete
                                    </button>
                                </ButtonContent>
                                <MessageTemplate>
                                    <div class="card border-primary pop-message-card">
                                        <div class="card-header bg-primary text-white">Delete Event?</div>
                                        <div class="card-body">
                                            <p>
                                                This will delete the event!<br />
                                                Are you sure?
                                            </p>
                                        </div>
                                    </div>
                                </MessageTemplate>
                            </ConfirmationDialog>
                            </div>  
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-3">
                    <div class="card border-1 m-2 mb-2">
                        <div class="card-header text-center">
                            <a href="details/@e.EventId">
                                <img src="/Images/Event images/@e.ImageUrl" style="width:200px; height:150px;" />
                            </a>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title"><strong>@e.Name:</strong></h5>
                            <span class="card-text font-weight-bold"><strong>Location:</strong> @e.Location</span><br>
                            <span class="card-text font-weight-bold"><strong>Events date:</strong> @e.EventDate.ToString("yyyy-MM-dd")</span><br>
                            <span class="card-text font-weight-bold"><strong>Local time:</strong> @e.EventDate.ToString("HH:mm")</span><br>
                            <span class="card-text font-weight-bold"><strong>Ticket price:</strong> @e.TicketPrice</span><br>
                            <!-----------------------------------------------Button with delete dialog--------------------------------------------------->
                            <ConfirmationDialog Title="Delete Event"
                                    Class="btn btn-psl-add mt-2"
                                    Message="Delete this event?"
                                    YesCssClass="btn-yes btn-success"
                                    NoCssClass="btn-no btn-danger"
                                    ConfirmedChanged="@(async (bool confirmed) => await DeleteEvent(e.EventId, confirmed))">
                                <ButtonContent>
                                    <button type="submit" class="btn btn-lg btn-danger w-100 fs-6 fw-bolder">
                                        <ion-icon name="trash-outline" style="color:white;"></ion-icon> Delete
                                    </button>
                                </ButtonContent>
                                <MessageTemplate>
                                    <div class="card border-primary pop-message-card">
                                        <div class="card-header bg-primary text-white">Delete Event?</div>
                                        <div class="card-body">
                                            <p>
                                                This will delete the event!<br />
                                                Are you sure?
                                            </p>
                                        </div>
                                    </div>
                                </MessageTemplate>
                            </ConfirmationDialog>                       
                        </div>
                    </div>
                </div>
            }
        }
    }
</div>

@code
{
    private List<EventModel>? allEvents = new();
    private List<EventModel>? filteredEvents = new();
    private ConfirmationDialog? deleteConfirmation;
    [Parameter]
    public string? searchText { get; set; }
    private bool isCheapestFirst = true;

    protected override async Task OnInitializedAsync()
    {
        await GetEvents();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (searchText != null)
        {
            filteredEvents = allEvents?.Where(e => e.Name!.ToLower().Contains(searchText.ToLower())).ToList();
        }
    }

    private async Task GetEvents()
    {
        allEvents = await service.GetEventsAsync();
        filteredEvents = allEvents;
    }


    private void FilterEvents(ChangeEventArgs e)
    {
        filteredEvents = allEvents!.Where(ev => ev.Name!.ToLower().Contains(e.Value!.ToString())).ToList();
    }

    private void SortByPrice()
    {
        List<EventModel> sortedList;
        if (isCheapestFirst)
            sortedList = filteredEvents.OrderBy(e => e.TicketPrice).ToList();
        else
            sortedList = filteredEvents.OrderByDescending(e => e.TicketPrice).ToList();
        filteredEvents = sortedList;
        isCheapestFirst = !isCheapestFirst;
    }
    private void SortByDate()
    {
        List<EventModel> sortedList;
        if (isCheapestFirst)
            sortedList = filteredEvents.OrderBy(e => e.EventDate).ToList();
        else
            sortedList = filteredEvents.OrderByDescending(e => e.EventDate).ToList();
        filteredEvents = sortedList;
        isCheapestFirst = !isCheapestFirst;
    }
    private async Task DeleteEvent(int eventId, bool isConfirmed)
    {
        if (isConfirmed)
        {
            await service.DeleteEventByIdAsync(eventId);
            await GetEvents();
        }
    }

}
