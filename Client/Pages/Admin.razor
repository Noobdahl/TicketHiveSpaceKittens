@page "/admin"
@using Microsoft.AspNetCore.Authorization;
@using TicketHiveSpaceKittens.Client.Services;
@using TicketHiveSpaceKittens.Shared.Models;
@attribute [Authorize (Roles = "Admin")]
@inject IEventService service
@inject NavigationManager navManager
@inject IModalService modal


<style>

    .table-responsive {
        margin: 30px 0;
    }

    .table-wrapper {
        background: #fff;
        padding: 20px 25px;
        border-radius: 3px;
        min-width: 1000px;
        box-shadow: 0 1px 1px rgba(0,0,0,.05);
    }

    .table-title {
        padding-bottom: 15px;
        background: #fbe89c;
        color: #305076;
        padding: 16px 30px;
        min-width: 100%;
        margin: -20px -25px 10px;
        border-radius: 3px 3px 0 0;
    }

        .table-title h2 {
            margin: 5px 0 0;
            font-size: 24px;
        }

        .table-title .btn-group {
            float: right;
        }

        .table-title .btn {
            color: #fff;
            float: right;
            font-size: 13px;
            border: none;
            min-width: 50px;
            border-radius: 2px;
            border: none;
            outline: none !important;
            margin-left: 10px;
        }

            .table-title .btn i {
                float: left;
                font-size: 21px;
                margin-right: 5px;
            }

            .table-title .btn span {
                float: left;
                margin-top: 2px;
            }

    table.table tr th, table.table tr td {
        border-color: #e9e9e9;
        padding: 12px 15px;
        vertical-align: middle;
    }

        table.table tr th:first-child {
            width: 60px;
        }

        table.table tr th:last-child {
            width: 100px;
        }

    table.table-striped tbody tr:nth-of-type(odd) {
        background-color: #fcfcfc;
    }

    table.table-striped.table-hover tbody tr:hover {
        background: #f5f5f5;
    }

    table.table th i {
        font-size: 13px;
        margin: 0 5px;
        cursor: pointer;
    }

    table.table td:last-child i {
        opacity: 0.9;
        font-size: 22px;
        margin: 0 5px;
    }

    table.table td a {
        font-weight: bold;
        color: #566787;
        display: inline-block;
        text-decoration: none;
        outline: none !important;
    }

        table.table td a:hover {
            color: #2196F3;
        }

        table.table td a.edit {
            color: #FFC107;
        }

        table.table td a.delete {
            color: #F44336;
        }

    table.table td i {
        font-size: 19px;
    }

    table.table .avatar {
        border-radius: 50%;
        vertical-align: middle;
        margin-right: 10px;
    }

    .pagination {
        float: right;
        margin: 0 0 5px;
    }

        .pagination li a {
            border: none;
            font-size: 13px;
            min-width: 30px;
            min-height: 30px;
            color: #999;
            margin: 0 2px;
            line-height: 30px;
            border-radius: 2px !important;
            text-align: center;
            padding: 0 6px;
        }

            .pagination li a:hover {
                color: #666;
            }

        .pagination li.active a, .pagination li.active a.page-link {
            background: #03A9F4;
        }

            .pagination li.active a:hover {
                background: #0397d6;
            }

        .pagination li.disabled i {
            color: #ccc;
        }

        .pagination li i {
            font-size: 16px;
            padding-top: 6px
        }

    .hint-text {
        float: left;
        margin-top: 10px;
        font-size: 13px;
    }
    /* Custom checkbox */
    .custom-checkbox {
        position: relative;
    }

        .custom-checkbox input[type="checkbox"] {
            opacity: 0;
            position: absolute;
            margin: 5px 0 0 3px;
            z-index: 9;
        }

        .custom-checkbox label:before {
            width: 18px;
            height: 18px;
        }

        .custom-checkbox label:before {
            content: '';
            margin-right: 10px;
            display: inline-block;
            vertical-align: text-top;
            background: white;
            border: 1px solid #bbb;
            border-radius: 2px;
            box-sizing: border-box;
            z-index: 2;
        }

        .custom-checkbox input[type="checkbox"]:checked + label:after {
            content: '';
            position: absolute;
            left: 6px;
            top: 3px;
            width: 6px;
            height: 11px;
            border: solid #000;
            border-width: 0 3px 3px 0;
            transform: inherit;
            z-index: 3;
            transform: rotateZ(45deg);
        }

        .custom-checkbox input[type="checkbox"]:checked + label:before {
            border-color: #03A9F4;
            background: #03A9F4;
        }

        .custom-checkbox input[type="checkbox"]:checked + label:after {
            border-color: #fff;
        }

        .custom-checkbox input[type="checkbox"]:disabled + label:before {
            color: #b8b8b8;
            cursor: auto;
            box-shadow: none;
            background: #ddd;
        }
    /* Modal styles */
    .modal .modal-dialog {
        max-width: 400px;
    }

    .modal .modal-header, .modal .modal-body, .modal .modal-footer {
        padding: 20px 30px;
    }

    .modal .modal-content {
        border-radius: 3px;
        font-size: 14px;
    }

    .modal .modal-footer {
        background: #ecf0f1;
        border-radius: 0 0 3px 3px;
    }

    .modal .modal-title {
        display: inline-block;
    }

    .modal .form-control {
        border-radius: 2px;
        box-shadow: none;
        border-color: #dddddd;
    }

    .modal textarea.form-control {
        resize: vertical;
    }

    .modal .btn {
        border-radius: 2px;
        min-width: 100px;
    }

    .modal form label {
        font-weight: normal;
    }
</style>


<div class="container-xl">
	<div class="table-responsive">
		<div class="table-wrapper">
			<div class="table-title">
				<div class="row">
					<div class="col-sm-6">
						<h2><b>Manage Events</b></h2>
					</div>
					<div class="col-sm-6">
						<a  class="btn btn-success" data-toggle="modal"> <span>Add New Event</span></a>
						<a  class="btn btn-danger" data-toggle="modal"> <span>Delete Event</span></a>						
					</div>
				</div>
			</div>

                        <!-- Table Header-->
			<table class="table table-striped table-hover">
				<thead>
					<tr>
						<th>
							<span class="custom-checkbox">
								<input type="checkbox" id="selectAll">
								<label for="selectAll"></label>
							</span>

						</th>
                            <th>Nr:</th>
						<th>Name:</th>
						<th>Description:</th>
						<th>Location:</th>
                        <th>Date:</th>
                        <th>Price:</th>
						<th>Image:</th>

					</tr>
				</thead>


				<tbody>

 @if (filteredEvents != null)
    {
                            var count = 1;
                            foreach (var e in filteredEvents)
                            {

                                if (e.TicketsRemaining > 0)
                                {
                                    <tr>


                                        <td>
                                            <span class="custom-checkbox">
                                                <input type="checkbox" id="checkbox1" name="options[]" value="1">
                                                <label for="checkbox1"></label>
                                            </span>
                                        </td>
                                        <td>@(count++)</td>
                                        <td>@e.Name</td>
                                        <td>@e.Description</td>
                                        <td>@e.Location</td>
                                        <td>@e.EventDate</td>
                                        <td>@e.TicketPrice</td>
                                        <td>
                                            <a href="details/@e.EventId">
                                                <img class="card-img-top" src="/Images/Event images/@e.ImageUrl" style="width:80px; height:80px" />
                                            </a>  
                                        </td>


                                        <td>
                                        <button @onclick="@(()=>modal.Show<AppInfo>())" class="btn btn-primary fs-6  mb-4 mt-3">About us</button>
                                        </td>

                                    </tr>
                                }

}
}

				</tbody>
			</table>
		</div>
	</div>        
</div>

    <!-----------------------------------------------Old--------------------------------------------------->


<div class="card border-0" style="margin-right:80px">
    <div class="card-body align-self-end">
        <a class="btn btn-primary btn-lg btn-block" href="admin/addevent">Add Event</a>
    </div>
</div>


<div class=" form-group mt-5 text-center">
    <h1 class="fw-bolder">Search for the event</h1>
    <input class="form-control-sm" type="text" @bind-value="@searchText" @oninput="@FilterEvents" placeholder="Search event..." />
    <button class="btn btn-sm btn-outline-primary" @onclick="SortByPrice">Price</button>
    <button class="btn btn-sm btn-warning" @onclick="SortByDate">Date</button>
</div>


<div class="row mt-5">

    @if (filteredEvents != null)
    {
        foreach (var e in filteredEvents)
        {
            if (e.TicketsRemaining > 0)
            {
                <div class="col-md-3 mt-3">
                    <div class="card border-1 m-2 mb-2">
                  
                            <div class="card-header text-center">
                                <a href="details/@e.EventId">
                                    <img class="card-img-top" src="/Images/Event images/@e.ImageUrl" style="width:200px; height:150px" />
                                </a>
                            </div>

                            <div class="card-body">
                            <h5 class="card-title"><strong>@e.Name:</strong></h5><br>
                            <span class="card-text font-weight-bold"><strong>Location:</strong> @e.Location</span><br>
                            <span class="card-text font-weight-bold"><strong>Events date:</strong> @e.EventDate</span><br>
                            <span class="card-text font-weight-bold"><strong>Ticket price:</strong> @e.TicketPrice</span><br>
                                        <!-----------------------------------------------Button with delete dialog--------------------------------------------------->
                            <ConfirmationDialog Title="Delete Event"
                                    Class="btn btn-psl-add mt-2"
                                    Message="Delete this event?"
                                    YesCssClass="btn-yes btn-success"
                                    NoCssClass="btn-no btn-danger"
                                    ConfirmedChanged="@(async (bool confirmed) => await DeleteEvent(e.EventId, confirmed))">
                                <ButtonContent>
                                    <button type="submit" class="btn btn-lg btn-danger w-100 fs-6 fw-bolder">
                                        <ion-icon name="trash-outline" style="color:white;"></ion-icon> Delete
                                    </button>
                                </ButtonContent>
                                <MessageTemplate>
                                    <div class="card border-primary pop-message-card">
                                        <div class="card-header bg-primary text-white">Delete Event?</div>
                                        <div class="card-body">
                                            <p>
                                                This will delete the event!<br />
                                                Are you sure?
                                            </p>
                                        </div>
                                    </div>
                                </MessageTemplate>
                            </ConfirmationDialog>
                            </div>  
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-3">
                    <div class="card border-1 m-2 mb-2">
                        <div class="card-header text-center">
                            <a href="details/@e.EventId">
                                <img src="/Images/Event images/@e.ImageUrl" style="width:200px; height:150px;" />
                            </a>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title"><strong>@e.Name:</strong></h5>
                            <span class="card-text font-weight-bold"><strong>Location:</strong> @e.Location</span><br>
                            <span class="card-text font-weight-bold"><strong>Events date:</strong> @e.EventDate</span><br>
                            <span class="card-text font-weight-bold"><strong>Ticket price:</strong> @e.TicketPrice</span><br>
                            <!-----------------------------------------------Button with delete dialog--------------------------------------------------->
                            <ConfirmationDialog Title="Delete Event"
                                    Class="btn btn-psl-add mt-2"
                                    Message="Delete this event?"
                                    YesCssClass="btn-yes btn-success"
                                    NoCssClass="btn-no btn-danger"
                                    ConfirmedChanged="@(async (bool confirmed) => await DeleteEvent(e.EventId, confirmed))">
                                <ButtonContent>
                                    <button type="submit" class="btn btn-lg btn-danger w-100 fs-6 fw-bolder">
                                        <ion-icon name="trash-outline" style="color:white;"></ion-icon> Delete
                                    </button>
                                </ButtonContent>
                                <MessageTemplate>
                                    <div class="card border-primary pop-message-card">
                                        <div class="card-header bg-primary text-white">Delete Event?</div>
                                        <div class="card-body">
                                            <p>
                                                This will delete the event!<br />
                                                Are you sure?
                                            </p>
                                        </div>
                                    </div>
                                </MessageTemplate>
                            </ConfirmationDialog>                       
                        </div>
                    </div>
                </div>
            }
        }
    }
</div>

@code
{
    private List<EventModel>? allEvents = new();
    private List<EventModel>? filteredEvents = new();
    private ConfirmationDialog? deleteConfirmation;
    [Parameter]
    public string? searchText { get; set; }
    private bool isCheapestFirst = true;

    protected override async Task OnInitializedAsync()
    {
        await GetEvents();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (searchText != null)
        {
            filteredEvents = allEvents?.Where(e => e.Name!.ToLower().Contains(searchText.ToLower())).ToList();
        }
    }

    private async Task GetEvents()
    {
        allEvents = await service.GetEventsAsync();
        filteredEvents = allEvents;
    }


    private void FilterEvents(ChangeEventArgs e)
    {
        filteredEvents = allEvents!.Where(ev => ev.Name!.ToLower().Contains(e.Value!.ToString())).ToList();
    }

    private void SortByPrice()
    {
        List<EventModel> sortedList;
        if (isCheapestFirst)
            sortedList = filteredEvents.OrderBy(e => e.TicketPrice).ToList();
        else
            sortedList = filteredEvents.OrderByDescending(e => e.TicketPrice).ToList();
        filteredEvents = sortedList;
        isCheapestFirst = !isCheapestFirst;
    }
    private void SortByDate()
    {
        List<EventModel> sortedList;
        if (isCheapestFirst)
            sortedList = filteredEvents.OrderBy(e => e.EventDate).ToList();
        else
            sortedList = filteredEvents.OrderByDescending(e => e.EventDate).ToList();
        filteredEvents = sortedList;
        isCheapestFirst = !isCheapestFirst;
    }
    private async Task DeleteEvent(int eventId, bool isConfirmed)
    {
        if (isConfirmed)
        {
            await service.DeleteEventByIdAsync(eventId);
            await GetEvents();
        }
    }

}
