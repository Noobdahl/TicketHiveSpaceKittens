@page "/booking"
@page "/booking/{searchText}"
@using Microsoft.AspNetCore.Authorization;
@using TicketHiveSpaceKittens.Client.Manager;
@using TicketHiveSpaceKittens.Client.Services;
@using TicketHiveSpaceKittens.Shared.Models;
@inject IEventService service
@inject ICartService cartService
@inject NavigationManager navigationManager;
@inject IModalService modal
@attribute [Authorize]

<div class=" form-group mt-5 text-center">
    <h1 class="fw-bolder">Search your favorite events</h1>
    <input class="form-control-sm" type="text" @bind-value="@searchText" @oninput="@FilterEvents" placeholder="Search event..." />
    <button class="btn btn-sm btn-outline-primary" @onclick="SortByPrice">Price</button>
    <button class="btn btn-sm btn-warning" @onclick="SortByDate">Date</button>
</div>


<div class="row mt-5">

    @if (filteredEvents != null)
    {
        foreach (var e in filteredEvents)
        {
            if (e.TicketsRemaining > 0)
            {
                <div class="col-md-3 mt-3">
                    <div class="card border-1 m-2 mb-2">
                  
                            <div class="card-header text-center">
                                <a href="details/@e.EventId">
                                    <img class="card-img-top" src="/Images/Event images/@e.ImageUrl" style="width:200px; height:150px" />
                                </a>
                            </div>

                            <div class="card-body">
                            <h5 class="card-title"><strong>@e.Name:</strong></h5><br>
                            <span class="card-text font-weight-bold"><strong>Location:</strong> @e.Location</span><br>
                            <span class="card-text font-weight-bold"><strong>Events date:</strong> @e.EventDate.ToString("yyyy-MM-dd")</span><br>
                            <span class="card-text font-weight-bold"><strong>Local time:</strong> @e.EventDate.ToString("HH:mm")</span><br>
                            <span class="card-text font-weight-bold"><strong>Ticket price:</strong> @RatesManager.GetPrice(e.TicketPrice)</span><br>
                            <button class="btn btn-primary mt-3" style="font-family: 'Times New Roman', Times, serif" @onclick="@(() => {cartService.AddToCartAsync(e); modal.Show<StepBeforeCart>("Event added to cart!");})">Buy Ticket</button>
                            </div>  
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-3">
                    <div class="card border-1 m-2 mb-2">
                        <div class="card-header text-center">
                            <a href="details/@e.EventId">
                                <img src="/Images/Event images/@e.ImageUrl" style="width:200px; height:150px;" />
                            </a>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title"><strong>@e.Name:</strong></h5>
                            <span class="card-text font-weight-bold"><strong>Location:</strong> @e.Location</span><br>
                            <span class="card-text font-weight-bold"><strong>Events date:</strong> @e.EventDate.ToString("yyyy-MM-dd")</span><br>
                            <span class="card-text font-weight-bold"><strong>Local time:</strong> @e.EventDate.ToString("HH:mm")</span><br>
                            <span class="card-text font-weight-bold"><strong>Ticket price:</strong> @RatesManager.GetPrice(e.TicketPrice)</span><br>

                            <button disabled class="btn btn-primary mt-3" @onclick="@(() => {cartService.AddToCartAsync(e);})"> Sold Out </button>
                        </div>
                    </div>
                </div>
            }
        }
    }
</div>

@code
{
    private List<EventModel>? allEvents = new();
    private List<EventModel>? filteredEvents = new();
    [Parameter]
    public string searchText { get; set; }
    private bool isCheapestFirst = true;

    protected override async Task OnInitializedAsync()
    {
        await GetEvents();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (searchText != null)
        {
            filteredEvents = allEvents.Where(e => e.Name!.ToLower().Contains(searchText.ToLower())).ToList();
        }
    }

    private async Task GetEvents()
    {
        allEvents = await service.GetEventsAsync();
        filteredEvents = allEvents;
    }


    private void FilterEvents(ChangeEventArgs e)
    {
        filteredEvents = allEvents!.Where(ev => 
            ev.Name!.ToLower().Contains(e.Value!.ToString())
            ||
            ev.Location!.ToLower().Contains(e.Value!.ToString())
            ||
            ev.Tags.Any(tag => tag.TagName.ToLower().Contains(e.Value!.ToString()))
            ||
            ev.Description!.ToLower().Contains(e.Value!.ToString())
        ).ToList();
    }

    private void SortByPrice()
    {
        List<EventModel> sortedList;
        if (isCheapestFirst)
            sortedList = filteredEvents.OrderBy(e => e.TicketPrice).ToList();
        else
            sortedList = filteredEvents.OrderByDescending(e => e.TicketPrice).ToList();
        filteredEvents = sortedList;
        isCheapestFirst = !isCheapestFirst;
    }
    private void SortByDate()
    {
        List<EventModel> sortedList;
        if (isCheapestFirst)
            sortedList = filteredEvents.OrderBy(e => e.EventDate).ToList();
        else
            sortedList = filteredEvents.OrderByDescending(e => e.EventDate).ToList();
        filteredEvents = sortedList;
        isCheapestFirst = !isCheapestFirst;
    }
}
